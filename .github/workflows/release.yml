name: Release Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test environment
        run: |
          # Create test directories
          sudo mkdir -p /test/{folder,src,empty-folder,project,my-project,auto-convert-folder,convert-folder,reveal-folder}
          sudo mkdir -p /project/src
          # Create test files
          sudo touch /test/{file.ts,renamed.ts,external-file.ts,external-to-section.ts,existing.ts,valid.ts}
          sudo mkdir -p /test/external-folder && sudo touch /test/external-folder/index.ts
          sudo touch /test/folder/{file1.ts,file2.ts}
          sudo touch /test/src/main.ts
          sudo touch /test/project/app.ts
          sudo touch /test/my-project/index.ts
          sudo touch /project/src/component.ts
          # Make directories writable for tests
          sudo chmod -R 755 /test /project
          echo "Test environment setup completed"

      - name: Run tests
        run: xvfb-run -a npm test

      - name: Compile TypeScript
        run: npm run compile

  build-and-publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install VSCE
        run: npm install -g @vscode/vsce

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update package.json version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          TARGET_VERSION="${{ steps.version.outputs.version }}"
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "Updating version from $CURRENT_VERSION to $TARGET_VERSION"
            npm version $TARGET_VERSION --no-git-tag-version
          else
            echo "Version already set to $TARGET_VERSION, skipping update"
          fi

      - name: Compile and prepare for packaging
        run: |
          # Setup test environment before running tests
          sudo mkdir -p /test/{folder,src,empty-folder,project,my-project,auto-convert-folder,convert-folder,reveal-folder}
          sudo mkdir -p /project/src
          sudo touch /test/{file.ts,renamed.ts,external-file.ts,external-to-section.ts,existing.ts,valid.ts}
          sudo mkdir -p /test/external-folder && sudo touch /test/external-folder/index.ts
          sudo touch /test/folder/{file1.ts,file2.ts}
          sudo touch /test/src/main.ts
          sudo touch /test/project/app.ts
          sudo touch /test/my-project/index.ts
          sudo touch /project/src/component.ts
          sudo chmod -R 755 /test /project
          npm run compile
          xvfb-run -a npm run test

      - name: Package extension
        run: |
          vsce package --out focus-space-${{ steps.version.outputs.version }}.vsix

      - name: Publish to VS Code Marketplace
        env:
          VSCE_PAT: ${{ secrets.VSCE_PAT }}
        run: |
          vsce publish --packagePath focus-space-${{ steps.version.outputs.version }}.vsix

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            focus-space-${{ steps.version.outputs.version }}.vsix
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload VSIX as artifact
        uses: actions/upload-artifact@v4
        with:
          name: focus-space-extension
          path: focus-space-${{ steps.version.outputs.version }}.vsix